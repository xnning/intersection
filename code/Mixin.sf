type Open S = 'S -> S;
let rec fix S (f : Open S) : S = f (fix S f);
let fact (this : '(Int -> Int)) (n : Int) = if n == 0 then 1 else n * this (n - 1);
type Exp = { print : 'String, eval : Int };
let e = { print = "1", eval = 1 };
let add (e1 : Exp) (e2 : Exp) : Open Exp = \(this : 'Exp). { print = this.eval.toString(), eval = 1 };
(fix Exp (add e e)).print
