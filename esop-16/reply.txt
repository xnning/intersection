* no top type; or refinement types (reviewer 1 & 2)

Having a top type requires a minor modification to the specification:

A * B = not exists C. A <: C and B <: C and C /= top 

This is mentioned in the conclusion. We do not foresee major
complications arizing from having a top type. Top would make the
metatheory more messy (managing all the side-conditions for C /=top),
but would not add fundamental difficulties.

So, a justification for the system in the paper is that it is 
the simplest system that already illustrates the key difficult 
issues of disjointness.

Admitedly refinement types seem more challenging. We have thought 
about them and it was unclear how to deal with them. 

We will make this clearer in early on in the paper, and 
announce that there's some coupling between the approach and 
type system.

#reviewer 1

reply to concern about supertypes.

#reviewer 2

QUESTION:
Do the authors know if this approach works for recursively defined objects?  For example, can we usefully employ traits to describe a LinkedList class that contains a "next" pointer to another LinkedList?

#reviewer 3

* Lambda&

- Lambda& focuses on the overloading problem for functions; seems 
more related to the problem of application.
- uses types at run-time to select the most specific function 
to be applied; no elaboration
- although it can encode records, it is unclear hot to encode 
arbitrary intersections.

* traits:

our point is not to argue that traits can be encoded with records; 

rather we show that, in the same way that Dunfield calculus can be viewed
as a foundational calculus that can encode various language features 
(including records); 
our calculus can be viewed as a foundational calculus that generalizes 
records with non-overlapping fields, and as such can model constructs 
such as traits, that rely on such non-overlapping conditions.

Dunfield calculus alone would not be able to encode traits (it 
misses the checks for conflicts). So, if the goal is to use 
a system with intersection types and a merge operator to model 
traits, some additional work is needed: that's what our system does.
