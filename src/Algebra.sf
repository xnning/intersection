type Open S = (Unit -> S) -> S;
type Mixin S = (Unit -> S) -> (Unit -> S) -> S;
let extends S (f : Mixin S) (g : Mixin S) : Mixin S
  = \ (super : Unit -> S). \ (this  : Unit -> S). f (\ (d : Unit). g super this) this;

-- BEGIN_IEVAL
type IEval  = { eval : Int };
-- END_IEVAL

-- BEGIN_EXPALG
type ExpAlg E = { lit : Int -> E, add : E -> E -> E };
let evalAlg = {
  lit = \(x : Int). { eval = x },
  add = \(x : IEval). \(y : IEval). { eval = x.eval + y.eval }
};
-- END_EXPALG

-- BEGIN_IPRINT
type IPrint = { print : String };
-- END_IPRINT

-- BEGIN_SUBEXPALG
type SubExpAlg E = (ExpAlg E) & { sub : E -> E -> E };
let subEvalAlg = evalAlg ,, { sub = \ (x : IEval). \ (y : IEval). { eval = x.eval - y.eval } };
let printAlg = {
  lit = \(x : Int). { print = x.toString() },
  add = \(x : IPrint). \(y : IPrint). { print = x.print.concat(" + ").concat(y.print) },
  sub = \(x : IPrint). \(y : IPrint). { print = x.print.concat(" - ").concat(y.print) }
};
-- END_SUBEXPALG

-- BEGIN_ALGEBRA_E1_E2
let e1 E (f : ExpAlg E)    = f.add (f.lit 6) (f.lit 6);
let e2 E (f : SubExpAlg E) = f.sub (exp1 E f) (f.lit 2);
-- END_ALGEBRA_E1_E2

-- BEGIN_MERGE
let merge A B (f : ExpAlg A) (g : ExpAlg B) = {
  lit = \(x : Int). f.lit x ,, g.lit x, -- P1
  add = \(x : A & B). \(y : A & B). f.add x y ,, g.add x y
};
-- END_MERGE

-- BEGIN_NEWALG
let newAlg = merge IEval IPrint subEvalAlg printAlg in
-- END_NEWALG

-- BEGIN_PRINT
(exp1 (IEval & IPrint) newAlg).print
-- END_PRINT
