EP:

Initial set of features:
Type of expressions:

{lit : Int -> E, add : (E, E) -> E} = {lit : Int -> E} & {add : (E, E) -> E}

{lit : Int, add : (E, E)} = {lit : Int} & {add : (E, E)}

Operations:

eval : ({lit : Int} -> Int) & ({add : (E, E)} -> Int)
eval = (\e. e.lit) ,, (\e. eval e._1 + eval e._2)

eval : ({lit : Int -> E} -> (Int -> E)) & ({add : (E, E) -> E} -> (Int -> E))
     = ({lit : Int -> E} | {add : (E, E) -> E}) -> (Int -> E)
eval = (\(e : {lit : Int -> E}). e.lit) ,, (\(e : {add : (E, E) -> E}). e.add)

-- Add a new type of expressions. For example, subtraction.
{lit : Int -> E, add : (E, E) -> E, sub : (E, E) -> E}

-- Add a new operation. For example pretty printing.
pretty = (\e. show e.lit) ,, (\e. pretty e._1 ++ "+" ++ pretty e._2) ,, (\e. pretty e._1 ++ "-" ++ pretty e._2)

{lit : Int -> E, add : (E, E) -> E}
type ChurchE = forall E. ((Int -> E), (E, E) -> E) -> E

Section 5
Expression Families Problem

Composition = forall A. forall B. A -> B -> A & B

FOPwOA.pdf
Fig. 3

